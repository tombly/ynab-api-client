//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System;
using System.Threading;
using System.Threading.Tasks;

namespace Ynab.Api.Client
{
    /// <summary>
    /// Interface for YNAB API Client operations
    /// </summary>
    public interface IYnabApiClient
    {
        /// <summary>
        /// Gets or sets the base URL for API calls
        /// </summary>
        string BaseUrl { get; set; }

        /// <summary>
        /// User info
        /// </summary>
        /// <remarks>
        /// Returns authenticated user information
        /// </remarks>
        /// <returns>The user info</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<UserResponse> GetUserAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// User info
        /// </summary>
        /// <remarks>
        /// Returns authenticated user information
        /// </remarks>
        /// <returns>The user info</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<UserResponse> GetUserAsync(CancellationToken cancellationToken);

        /// <summary>
        /// List budgets
        /// </summary>
        /// <remarks>
        /// Returns budgets list with summary information
        /// </remarks>
        /// <param name="include_accounts">Whether to include the list of budget accounts</param>
        /// <returns>The list of budgets</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<BudgetSummaryResponse> GetBudgetsAsync(bool? include_accounts);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List budgets
        /// </summary>
        /// <remarks>
        /// Returns budgets list with summary information
        /// </remarks>
        /// <param name="include_accounts">Whether to include the list of budget accounts</param>
        /// <returns>The list of budgets</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<BudgetSummaryResponse> GetBudgetsAsync(bool? include_accounts, CancellationToken cancellationToken);

        /// <summary>
        /// Single budget
        /// </summary>
        /// <remarks>
        /// Returns a single budget with all related entities.  This resource is effectively a full budget export.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested budget</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<BudgetDetailResponse> GetBudgetByIdAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single budget
        /// </summary>
        /// <remarks>
        /// Returns a single budget with all related entities.  This resource is effectively a full budget export.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The requested budget</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<BudgetDetailResponse> GetBudgetByIdAsync(string budget_id, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// Budget Settings
        /// </summary>
        /// <remarks>
        /// Returns settings for a budget
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <returns>The requested budget settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<BudgetSettingsResponse> GetBudgetSettingsByIdAsync(string budget_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Budget Settings
        /// </summary>
        /// <remarks>
        /// Returns settings for a budget
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <returns>The requested budget settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<BudgetSettingsResponse> GetBudgetSettingsByIdAsync(string budget_id, CancellationToken cancellationToken);

        /// <summary>
        /// Account list
        /// </summary>
        /// <remarks>
        /// Returns all accounts
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested accounts</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AccountsResponse> GetAccountsAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Account list
        /// </summary>
        /// <remarks>
        /// Returns all accounts
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested accounts</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AccountsResponse> GetAccountsAsync(string budget_id, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// Create a new account
        /// </summary>
        /// <remarks>
        /// Creates a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The account to create.</param>
        /// <returns>The account was successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AccountResponse> CreateAccountAsync(string budget_id, PostAccountWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new account
        /// </summary>
        /// <remarks>
        /// Creates a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The account to create.</param>
        /// <returns>The account was successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AccountResponse> CreateAccountAsync(string budget_id, PostAccountWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// Single account
        /// </summary>
        /// <remarks>
        /// Returns a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="account_id">The id of the account</param>
        /// <returns>The requested account</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AccountResponse> GetAccountByIdAsync(string budget_id, Guid account_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single account
        /// </summary>
        /// <remarks>
        /// Returns a single account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="account_id">The id of the account</param>
        /// <returns>The requested account</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<AccountResponse> GetAccountByIdAsync(string budget_id, Guid account_id, CancellationToken cancellationToken);

        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the `last_knowledge_of_server` provided.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The categories grouped by category group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CategoriesResponse> GetCategoriesAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List categories
        /// </summary>
        /// <remarks>
        /// Returns all categories grouped by category group.  Amounts (budgeted, activity, balance, etc.) are specific to the `last_knowledge_of_server` provided.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The categories grouped by category group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CategoriesResponse> GetCategoriesAsync(string budget_id, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested category</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CategoryResponse> GetCategoryByIdAsync(string budget_id, string category_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single category
        /// </summary>
        /// <remarks>
        /// Returns a single category.  Amounts (budgeted, activity, balance, etc.) are specific to the current budget month (UTC).
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested category</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CategoryResponse> GetCategoryByIdAsync(string budget_id, string category_id, CancellationToken cancellationToken);

        /// <summary>
        /// Update a category
        /// </summary>
        /// <remarks>
        /// Update a category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update</param>
        /// <returns>The category was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveCategoryResponse> UpdateCategoryAsync(string budget_id, string category_id, PatchCategoryWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a category
        /// </summary>
        /// <remarks>
        /// Update a category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The category to update</param>
        /// <returns>The category was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveCategoryResponse> UpdateCategoryAsync(string budget_id, string category_id, PatchCategoryWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for the specified budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the budget month requested.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested month category</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CategoryResponse> GetMonthCategoryByIdAsync(string budget_id, DateTimeOffset month, string category_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Returns a single category for the specified budget month.  Amounts (budgeted, activity, balance, etc.) are specific to the budget month requested.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <returns>The requested month category</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<CategoryResponse> GetMonthCategoryByIdAsync(string budget_id, DateTimeOffset month, string category_id, CancellationToken cancellationToken);

        /// <summary>
        /// Update a category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific budget month.  Only `budgeted` amount can be updated.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The month category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>The month category was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveCategoryResponse> UpdateMonthCategoryAsync(string budget_id, DateTimeOffset month, string category_id, PatchMonthCategoryWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a category for a specific budget month
        /// </summary>
        /// <remarks>
        /// Update a category for a specific budget month.  Only `budgeted` amount can be updated.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="category_id">The id of the category</param>
        /// <param name="body">The month category to update.  Only `budgeted` amount can be updated and any other fields specified will be ignored.</param>
        /// <returns>The month category was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveCategoryResponse> UpdateMonthCategoryAsync(string budget_id, DateTimeOffset month, string category_id, PatchMonthCategoryWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// List payees
        /// </summary>
        /// <remarks>
        /// Returns all payees
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested payees</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeesResponse> GetPayeesAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payees
        /// </summary>
        /// <remarks>
        /// Returns all payees
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested payees</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeesResponse> GetPayeesAsync(string budget_id, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// Single payee
        /// </summary>
        /// <remarks>
        /// Returns a single payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The requested payee</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeResponse> GetPayeeByIdAsync(string budget_id, string payee_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single payee
        /// </summary>
        /// <remarks>
        /// Returns a single payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The requested payee</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeResponse> GetPayeeByIdAsync(string budget_id, string payee_id, CancellationToken cancellationToken);

        /// <summary>
        /// Update a payee
        /// </summary>
        /// <remarks>
        /// Update a payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="body">The payee to update</param>
        /// <returns>The payee was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SavePayeeResponse> UpdatePayeeAsync(string budget_id, string payee_id, PatchPayeeWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a payee
        /// </summary>
        /// <remarks>
        /// Update a payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="body">The payee to update</param>
        /// <returns>The payee was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SavePayeeResponse> UpdatePayeeAsync(string budget_id, string payee_id, PatchPayeeWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeLocationsResponse> GetPayeeLocationsAsync(string budget_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List payee locations
        /// </summary>
        /// <remarks>
        /// Returns all payee locations
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeLocationsResponse> GetPayeeLocationsAsync(string budget_id, CancellationToken cancellationToken);

        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_location_id">The id of the payee location</param>
        /// <returns>The requested payee location</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeLocationResponse> GetPayeeLocationByIdAsync(string budget_id, string payee_location_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single payee location
        /// </summary>
        /// <remarks>
        /// Returns a single payee location
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_location_id">The id of the payee location</param>
        /// <returns>The requested payee location</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeLocationResponse> GetPayeeLocationByIdAsync(string budget_id, string payee_location_id, CancellationToken cancellationToken);

        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for the specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync(string budget_id, string payee_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List locations for a payee
        /// </summary>
        /// <remarks>
        /// Returns all payee locations for the specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <returns>The list of requested payee locations</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<PayeeLocationsResponse> GetPayeeLocationsByPayeeAsync(string budget_id, string payee_id, CancellationToken cancellationToken);

        /// <summary>
        /// List budget months
        /// </summary>
        /// <remarks>
        /// Returns all budget months
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested budget months</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<MonthSummariesResponse> GetBudgetMonthsAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List budget months
        /// </summary>
        /// <remarks>
        /// Returns all budget months
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested budget months</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<MonthSummariesResponse> GetBudgetMonthsAsync(string budget_id, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// Single budget month
        /// </summary>
        /// <remarks>
        /// Returns a single budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <returns>The requested budget month</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<MonthDetailResponse> GetBudgetMonthAsync(string budget_id, DateTimeOffset month);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single budget month
        /// </summary>
        /// <remarks>
        /// Returns a single budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <returns>The requested budget month</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<MonthDetailResponse> GetBudgetMonthAsync(string budget_id, DateTimeOffset month, CancellationToken cancellationToken);

        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Returns budget transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionsResponse> GetTransactionsAsync(string budget_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions
        /// </summary>
        /// <remarks>
        /// Returns budget transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionsResponse> GetTransactionsAsync(string budget_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// Create a single transaction or multiple transactions
        /// </summary>
        /// <remarks>
        /// Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The transaction or transactions to create.  To create a single transaction, use the 'transaction' object.  To create multiple transactions, use the 'transactions' array.</param>
        /// <returns>The transaction or transactions were successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveTransactionsResponse> CreateTransactionAsync(string budget_id, PostTransactionsWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a single transaction or multiple transactions
        /// </summary>
        /// <remarks>
        /// Creates a single transaction or multiple transactions.  If you provide a body containing a `transaction` object, a single transaction will be created and if you provide a body containing a `transactions` array, multiple transactions will be created.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The transaction or transactions to create.  To create a single transaction, use the 'transaction' object.  To create multiple transactions, use the 'transactions' array.</param>
        /// <returns>The transaction or transactions were successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveTransactionsResponse> CreateTransactionAsync(string budget_id, PostTransactionsWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// Update multiple transactions
        /// </summary>
        /// <remarks>
        /// Updates multiple transactions, by `id` or `import_id`.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The transactions to update. Optionally, transaction `import_id` can be specified to be included in the response along with the `id` found on the transactions.</param>
        /// <returns>The transactions were successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveTransactionsResponse> UpdateTransactionsAsync(string budget_id, PatchTransactionsWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update multiple transactions
        /// </summary>
        /// <remarks>
        /// Updates multiple transactions, by `id` or `import_id`.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The transactions to update. Optionally, transaction `import_id` can be specified to be included in the response along with the `id` found on the transactions.</param>
        /// <returns>The transactions were successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<SaveTransactionsResponse> UpdateTransactionsAsync(string budget_id, PatchTransactionsWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// Import transactions
        /// </summary>
        /// <remarks>
        /// Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a financial institution.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <returns>The request was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionsImportResponse> ImportTransactionsAsync(string budget_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import transactions
        /// </summary>
        /// <remarks>
        /// Imports available transactions on all linked accounts for the given budget.  Linked accounts allow transactions to be imported directly from a financial institution.
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <returns>The request was successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionsImportResponse> ImportTransactionsAsync(string budget_id, CancellationToken cancellationToken);

        /// <summary>
        /// Single transaction
        /// </summary>
        /// <remarks>
        /// Returns a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The requested transaction</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionResponse> GetTransactionByIdAsync(string budget_id, string transaction_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single transaction
        /// </summary>
        /// <remarks>
        /// Returns a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The requested transaction</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionResponse> GetTransactionByIdAsync(string budget_id, string transaction_id, CancellationToken cancellationToken);

        /// <summary>
        /// Update a single transaction
        /// </summary>
        /// <remarks>
        /// Updates a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <param name="body">The transaction to update</param>
        /// <returns>The transaction was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionResponse> UpdateTransactionAsync(string budget_id, string transaction_id, PutTransactionWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a single transaction
        /// </summary>
        /// <remarks>
        /// Updates a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <param name="body">The transaction to update</param>
        /// <returns>The transaction was successfully updated</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionResponse> UpdateTransactionAsync(string budget_id, string transaction_id, PutTransactionWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// Delete an existing transaction
        /// </summary>
        /// <remarks>
        /// Deletes a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The transaction was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionResponse> DeleteTransactionAsync(string budget_id, string transaction_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an existing transaction
        /// </summary>
        /// <remarks>
        /// Deletes a single transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="transaction_id">The id of the transaction</param>
        /// <returns>The transaction was successfully deleted</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionResponse> DeleteTransactionAsync(string budget_id, string transaction_id, CancellationToken cancellationToken);

        /// <summary>
        /// List transactions for account
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="account_id">The id of the account</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionsResponse> GetTransactionsByAccountAsync(string budget_id, string account_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions for account
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified account
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="account_id">The id of the account</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<TransactionsResponse> GetTransactionsByAccountAsync(string budget_id, string account_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// List transactions for category
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="category_id">The id of the category.  "uncategorized" and "unapproved" can be used to get transactions without a category or unapproved transactions respectively.</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<HybridTransactionsResponse> GetTransactionsByCategoryAsync(string budget_id, string category_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions for category
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified category
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="category_id">The id of the category.  "uncategorized" and "unapproved" can be used to get transactions without a category or unapproved transactions respectively.</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<HybridTransactionsResponse> GetTransactionsByCategoryAsync(string budget_id, string category_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// List transactions for payee
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<HybridTransactionsResponse> GetTransactionsByPayeeAsync(string budget_id, string payee_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions for payee
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified payee
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="payee_id">The id of the payee</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<HybridTransactionsResponse> GetTransactionsByPayeeAsync(string budget_id, string payee_id, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// List transactions for a budget month
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<HybridTransactionsResponse> GetTransactionsByMonthAsync(string budget_id, string month, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List transactions for a budget month
        /// </summary>
        /// <remarks>
        /// Returns all transactions for the specified budget month
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="month">The budget month in ISO format (e.g. 2016-12-01) ("current" can also be used to specify the current calendar month (UTC))</param>
        /// <param name="since_date">If specified, only transactions on or after this date will be included.  The date should be ISO formatted (e.g. 2016-12-30).</param>
        /// <param name="type">If specified, only transactions of the specified type will be included. "uncategorized" and "unapproved" are currently supported.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<HybridTransactionsResponse> GetTransactionsByMonthAsync(string budget_id, string month, DateTimeOffset? since_date, Type? type, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// List scheduled transactions
        /// </summary>
        /// <remarks>
        /// Returns all scheduled transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested scheduled transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ScheduledTransactionsResponse> GetScheduledTransactionsAsync(string budget_id, long? last_knowledge_of_server);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List scheduled transactions
        /// </summary>
        /// <remarks>
        /// Returns all scheduled transactions
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="last_knowledge_of_server">The starting server knowledge.  If provided, only entities that have changed since `last_knowledge_of_server` will be included.</param>
        /// <returns>The list of requested scheduled transactions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ScheduledTransactionsResponse> GetScheduledTransactionsAsync(string budget_id, long? last_knowledge_of_server, CancellationToken cancellationToken);

        /// <summary>
        /// Create a scheduled transaction
        /// </summary>
        /// <remarks>
        /// Creates a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The scheduled transaction to create.</param>
        /// <returns>The scheduled transaction was successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ScheduledTransactionResponse> CreateScheduledTransactionAsync(string budget_id, PostScheduledTransactionWrapper body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a scheduled transaction
        /// </summary>
        /// <remarks>
        /// Creates a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="body">The scheduled transaction to create.</param>
        /// <returns>The scheduled transaction was successfully created</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ScheduledTransactionResponse> CreateScheduledTransactionAsync(string budget_id, PostScheduledTransactionWrapper body, CancellationToken cancellationToken);

        /// <summary>
        /// Single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Returns a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The requested scheduled transaction</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ScheduledTransactionResponse> GetScheduledTransactionByIdAsync(string budget_id, string scheduled_transaction_id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Single scheduled transaction
        /// </summary>
        /// <remarks>
        /// Returns a single scheduled transaction
        /// </remarks>
        /// <param name="budget_id">The id of the budget. "last-used" can be used to specify the last used budget and "default" can be used if default budget selection is enabled.</param>
        /// <param name="scheduled_transaction_id">The id of the scheduled transaction</param>
        /// <returns>The requested scheduled transaction</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        Task<ScheduledTransactionResponse> GetScheduledTransactionByIdAsync(string budget_id, string scheduled_transaction_id, CancellationToken cancellationToken);
    }
}
